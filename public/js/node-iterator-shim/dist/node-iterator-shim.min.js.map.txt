{"version":3,"sources":["node-iterator-shim.js"],"names":["global","factory","define","amd","exports","module","mod","nodeIteratorShim","this","createNodeIterator","root","whatToShow","filter","undefined","arguments","document","ownerDocument","iter","referenceNode","shim","_referenceNode","_pointerBeforeReferenceNode","Object","create","NodeIterator","prototype","get","pointerBeforeReferenceNode","detach","nextNode","value","result","previousNode"],"mappings":"CAAA,SAAWA,EAAQC,GACjB,GAAsB,kBAAXC,SAAyBA,OAAOC,IACzCD,QAAQ,UAAW,UAAWD,OACzB,IAAuB,mBAAZG,UAA6C,mBAAXC,QAClDJ,EAAQG,QAASC,YACZ,CACL,GAAIC,IACFF,WAEFH,GAAQK,EAAIF,QAASE,GACrBN,EAAOO,iBAAmBD,EAAIF,UAE/BI,KAAM,SAAUJ,EAASC,GAC1B,YAba,SAASI,GAAmBC,EAAMC,GAkB7C,GAlByDC,GAAMC,SAAAC,UAAA,GAAG,KAAIA,UAAA,GACpEC,EAAWL,EAAKM,cAChBC,EAAOF,EAASN,mBAAmBC,EAAMC,EAAYC,GAAQ,EACjE,OAAsC,mBAAxBK,GAAKC,cAAiCC,EAAKF,EAAMP,GAAQO,EAIzE,QAASE,GAAKF,EAAMP,GAClB,GAAIU,GAAiBV,EACjBW,GAA8B,CAElC,OAAOC,QAAOC,OAAOC,aAAaC,WAChCf,MACEgB,IAAK,WAmBD,MAnBOT,GAAKP,OAGlBC,YACEe,IAAK,WAqBD,MArBOT,GAAKN,aAGlBC,QACEc,IAAK,WAuBD,MAvBOT,GAAKL,SAGlBM,eACEQ,IAAK,WAyBD,MAzBON,KAGbO,4BACED,IAAK,WA2BD,MA3BOL,KAGbO,QACEF,IAAK,WA6BD,MA7BOT,GAAKW,SAGlBC,UACEC,MAAO,WACL,GAAIC,GAASd,EAAKY,UAElB,OADAR,IAA8B,EACf,OAAXU,EACK,KAEPX,EAAiBW,IAMvBC,cACEF,MAAO,WACL,GAAIC,GAASd,EAAKe,cAElB,OADAX,IAA8B,EACf,OAAXU,EACM,KAERX,EAAiBW,MAzCzB1B,EAAOD,QAfeK","file":"node-iterator-shim.min.js","sourcesContent":["export default function createNodeIterator(root, whatToShow, filter = null) {\n  let document = root.ownerDocument;\n  var iter = document.createNodeIterator(root, whatToShow, filter, false);\n  return typeof(iter.referenceNode) === 'undefined' ? shim(iter, root) : iter;\n}\n\n\nfunction shim(iter, root) {\n  var _referenceNode = root;\n  var _pointerBeforeReferenceNode = true;\n\n  return Object.create(NodeIterator.prototype, {\n    root: {\n      get: () => iter.root\n    },\n\n    whatToShow: {\n      get: () => iter.whatToShow\n    },\n\n    filter: {\n      get: () => iter.filter\n    },\n\n    referenceNode: {\n      get: () => _referenceNode\n    },\n\n    pointerBeforeReferenceNode: {\n      get: () => _pointerBeforeReferenceNode\n    },\n\n    detach: {\n      get: () => iter.detach\n    },\n\n    nextNode: {\n      value: () => {\n        let result = iter.nextNode();\n        _pointerBeforeReferenceNode = false;\n        if (result === null) {\n          return null;\n        } else {\n          _referenceNode = result;\n           return _referenceNode;\n        }\n      }\n    },\n\n    previousNode: {\n      value: () => {\n        let result = iter.previousNode();\n        _pointerBeforeReferenceNode = true;\n        if (result === null) {\n           return null;\n        } else {\n          _referenceNode = result;\n           return _referenceNode;\n        }\n      }\n    }\n  });\n}\n"],"sourceRoot":"./"}